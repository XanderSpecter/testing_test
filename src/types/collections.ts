import { ValidationSchema } from '@/utils/validation/validateSchema';
import { PossibleFieldType } from './apiModels';

interface CollectionValidationSchemas {
    GET?: ValidationSchema;
    POST?: ValidationSchema;
    PUT?: ValidationSchema;
    DELETE?: ValidationSchema;
}

export interface FieldParams {
    /**
     * Название поля. Отображается пользователю.
     */
    title: string;
    /**
     * Краткое название поля. Тоже отображается пользователю в некоторых случаях.
     */
    shortcut: string;
    /**
     * Тип поля. От этого зависит валидация, а также тип поля ввода при редактировании в форме.
     * Для типа `object` текстовый ввод в форме недоступен. При указании этого типа, поле будет работать с редактором.
     * Тип `hidden` позволяет скрыть поле как из таблицы, так и из формы, оставив его "служебным".
     */
    type: PossibleFieldType;
    /**
     * Декоратор для поля ввода.
     * Может быть строкой или функцией, возвращающей строку. Отображается в поле ввода параметра `перед` редактируемым вводом.
     */
    prefix?: string | (() => string);
    /**
     * Декоратор для поля ввода.
     * Может быть строкой или функцией, возвращающей строку. Отображается в поле ввода параметра `после` редактируемого ввода.
     */
    postfix?: string | (() => string);
    /**
     * Обязательность поля. Влияет на валидацию при добавлении или обновлении элемента.
     */
    required: boolean;
    /**
     * Должно ли поле быть уникальным в рамках коллекции. Влияет на валидацию при добавлении или обновлении элемента на стороне бэка.
     */
    mustBeUnique: boolean;
    /**
     * Позволяет добавить пояснение о требуемом типе или обязательности поля.
     * Отображается в подсказках в форме, а также в сообщениях об ошибках при валидации.
     */
    description?: string;
    /**
     * Запрет демонстрации поля в таблице на странице коллекции.
     * По умолчанию, поле отображается в таблице, если добавлено в `fieldsMapping`.
     * При помощи этого флага можно запретить отображение поля, но оставить возможность редактировать его в "детальной" форме.
     */
    hiddenInTable?: boolean;
    /**
     * Запрет редактирования поля в текстовой форме.
     * По умолчанию, поле считается редактируемым, если добавлено в `fieldsMapping`.
     * При помощи этого флага можно запретить редактирование поля, но оставить его демонстрацию и описание.
     */
    disabled?: boolean;
}

export interface AvailableCollection {
    /**
     * Имя коллекции, указывается для связи коллекции с таблицей БД, должно быть уникальным.
     */
    name: string;
    /**
     * Заголовок коллекции. Применяется для отображения на странице.
     */
    title: string;
    /**
     * Ключ сортировки элементов коллекции. Применяется автоматически при обращении за списком элементов.
     */
    defaultSortKey?: string;
    /**
     * Описание полей коллекции.
     * Должно содержать описание тех полей, которые могут быть видны в общей таблице на странице коллекции,
     * а также доступны для прямого редактирования пользователем через текстовую форму.
     * Если поле не описано здесь, оно считается "служебным" и для него не будут генерироваться понятные тексты ошибок валидации,
     * а также не будет доступно текстовое редактирование в форме.
     */
    fieldsMapping?: Record<string, FieldParams>;
    /**
     * Схемы валидации полей для проверки корректности данных перед записью в БД.
     * Для каждого из CRUD запросов прописывается отдельная схема, она расширяет базовую валидацию.
     * Позволяет расширить валидацию, помимо базовой на тип поля и обязательность.
     * При создании схемы, все поля должны содержать префикс `element.`, например `'element.name': validator`.
     */
    extraSchemas?: CollectionValidationSchemas;
}
