import { ValidateSchema } from '@/utils/validation/validateSchema';

interface CollectionValidationSchemas {
    GET?: ValidateSchema;
    POST?: ValidateSchema;
    PUT?: ValidateSchema;
    DELETE?: ValidateSchema;
}

interface FieldParams {
    /**
     * Название поля. Отображается пользователю.
     */
    title: string;
    /**
     * Краткое название поля. Тоже отображается пользователю в некоторых случаях.
     */
    shortcut: string;
    /**
     * Описание поля. Отображается пользователю иногда, если указано.
     */
    description?: string;
    /**
     * Запрет демонстрации поля в форме и на странице коллекции.
     * По умолчанию, поле отображается везде, если добавлено в `fieldsMapping`.
     */
    hidden?: boolean;
    /**
     * Запрет демонстрации поля в таблице на странице коллекции.
     * По умолчанию, поле отображается в таблице, если добавлено в `fieldsMapping`.
     * При помощи этого флага можно запретить отображение поля, но оставить возможность редактировать его в "детальной" форме.
     */
    hiddenInTable?: boolean;
    /**
     * Запрет редактирования поля в текстовой форме.
     * По умолчанию, поле считается редактируемым, если добавлено в `fieldsMapping`.
     * При помощи этого флага можно запретить редактирование поля, но оставить его демонстрацию и описание.
     */
    disableTextEdit?: boolean;
}

export interface AvailableCollection {
    /**
     * Имя коллекции, указывается для связи коллекции с таблицей БД, должно быть уникальным.
     */
    name: string;
    /**
     * Заголовок коллекции. Применяется для отображения на странице.
     */
    title: string;
    /**
     * Ключ сортировки элементов коллекции. Применяется автоматически при обращении за списком элементов.
     */
    defaultSortKey?: string;
    /**
     * Список полей коллекции, которые бэк должен проверять на уникальность перед сохранением элемента в БД.
     */
    uniqueFields?: string[];
    /**
     * Описание полей коллекции.
     * Должно содержать описание тех полей, которые могут быть видны в общей таблице на странице коллекции,
     * а также доступны для прямого редактирования пользователем через текстовую форму.
     * Если поле не описано здесь, оно считается "служебным" и для него не будут генерироваться понятные тексты ошибок валидации,
     * а также не будет доступно текстовое редактирование в форме.
     */
    fieldsMapping?: Record<string, FieldParams>;
    /**
     * Схемы валидации полей для проверки корректности данных перед записью в БД.
     */
    schemas?: CollectionValidationSchemas;
}
